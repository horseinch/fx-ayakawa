--- jpeg.orig/jconfig.h	2009-08-14 09:31:19 +0900
+++ jpeg/jconfig.h	2009-12-13 19:57:40 +0900
@@ -71,16 +71,25 @@
 
 /* If right shift of "long" quantities is unsigned on your machine,
  * you'll have to define this.  Fortunately few people should need it.
  */
 #undef RIGHT_SHIFT_IS_UNSIGNED
 
 #endif /* JPEG_INTERNALS */
 
+#if defined(JPEG_INTERNALS) || defined(JPEG_INTERNAL_OPTIONS)
+#undef JSIMD_MMX_NOT_SUPPORTED
+#undef JSIMD_3DNOW_NOT_SUPPORTED
+#undef JSIMD_SSE_NOT_SUPPORTED
+#undef JSIMD_SSE2_NOT_SUPPORTED
+#endif
+#define JSIMD_MASKFUNC_NOT_SUPPORTED
+#define JSIMD_MODEINFO_NOT_SUPPORTED
+
 
 /* these defines are not interesting for building just the IJG library,
  * but we leave 'em here anyway.
  */
 #ifdef JPEG_CJPEG_DJPEG
 
 #define BMP_SUPPORTED		/* BMP image file format */
 #define GIF_SUPPORTED		/* GIF image file format */
--- jpeg.orig/jmorecfg.h	2009-08-14 09:31:20 +0900
+++ jpeg/jmorecfg.h	2009-12-13 20:05:39 +0900
@@ -1,15 +1,22 @@
 /*
  * jmorecfg.h
  *
  * Copyright (C) 1991-1997, Thomas G. Lane.
  * This file is part of the Independent JPEG Group's software.
  * For conditions of distribution and use, see the accompanying README file.
  *
+ * ---------------------------------------------------------------------
+ * x86 SIMD extension for IJG JPEG library
+ * Copyright (C) 1999-2006, MIYASAKA Masaru.
+ * This file has been modified for SIMD extension.
+ * Last Modified :
+ * ---------------------------------------------------------------------
+ *
  * This file contains additional configuration options that customize the
  * JPEG software for special applications or support machine-dependent
  * optimizations.  Most users will not need to touch this file.
  */
 
 /*
  * This file has been modified for the Mozilla/Netscape environment.
  * Modifications are distributed under the mozilla.org tri-license and are
@@ -22,17 +29,19 @@
  * Define BITS_IN_JSAMPLE as either
  *   8   for 8-bit sample values (the usual setting)
  *   12  for 12-bit sample values
  * Only 8 and 12 are legal data precisions for lossy JPEG according to the
  * JPEG standard, and the IJG code does not support anything else!
  * We do not support run-time selection of data precision, sorry.
  */
 
-#define BITS_IN_JSAMPLE  8	/* use 8 or 12 */
+/* SIMD Ext: This SIMD code only copes with 8-bit sample values. */
+
+#define BITS_IN_JSAMPLE  8	/* SIMD Ext: cannot be changed! */
 
 
 /*
  * Maximum number of components (color channels) allowed in JPEG image.
  * To meet the letter of the JPEG spec, set this to 255.  However, darn
  * few applications need more than 4 channels (maybe 5 for CMYK + alpha
  * mask).  We recommend 10 as a reasonable compromise; use 4 if you are
  * really short on memory.  (Each allowed component costs a hundred or so
@@ -100,35 +109,16 @@
 /* Representation of a DCT frequency coefficient.
  * This should be a signed value of at least 16 bits; "short" is usually OK.
  * Again, we allocate large arrays of these, but you can change to int
  * if you have memory to burn and "short" is really slow.
  */
 
 typedef short JCOEF;
 
-/* Defines for MMX/SSE2 support. */
-
-#if defined(XP_WIN32) && defined(_M_IX86) && !defined(__GNUC__)
-#define HAVE_MMX_INTEL_MNEMONICS 
-
-/* SSE2 code appears broken for some cpus (bug 247437) */
-#define HAVE_SSE2_INTEL_MNEMONICS
-#define HAVE_SSE2_INTRINSICS
-#endif
-
-#if defined(__GNUC__) && defined(__i386__)
-#if defined(XP_MACOSX)
-#define HAVE_SSE2_INTRINSICS
-#endif /* ! XP_MACOSX */
-#endif /* ! GNUC && i386 */
-
-/* Add support for other platforms here */
-
-
 /* Compressed datastreams are represented as arrays of JOCTET.
  * These must be EXACTLY 8 bits wide, at least once they are written to
  * external storage.  Note that when using the stdio data source/destination
  * managers, this is also the data type passed to fread/fwrite.
  */
 
 #ifdef HAVE_UNSIGNED_CHAR
 
@@ -204,16 +194,26 @@
 
 /* These macros are used in all function definitions and extern declarations.
  * You could modify them if you need to change function linkage conventions;
  * in particular, you'll need to do that to make the library a Windows DLL.
  * Another application is to make all functions global for use with debuggers
  * or code profilers that require it.
  */
 
+#if defined(_MSC_VER) || defined(__BORLANDC__) || \
+    defined(__WATCOMC__) || defined(__MWERKS__) || \
+    defined(__ICC) || defined(__INTEL_COMPILER)
+#define JCDECL  __cdecl
+#elif defined(__GNUC__)
+#define JCDECL  __attribute__((__cdecl__))
+#else
+#define JCDECL
+#endif
+
 /* Mozilla mod: make external functions be DLL-able via JRI_PUBLIC_API(),
  * and supply extern "C" for C++ users of the C-compiled IJG library.
  * (Well, not anymore, but there's still a modification here.)
  */
 #include "prtypes.h"
 
 /* a function called through method pointers: */
 #define METHODDEF(type)		static type
@@ -228,19 +228,19 @@
 
 /* This macro is used to declare a "method", that is, a function pointer.
  * We want to supply prototype parameters if the compiler can cope.
  * Note that the arglist parameter must be parenthesized!
  * Again, you can customize this if you need special linkage keywords.
  */
 
 #ifdef HAVE_PROTOTYPES
-#define JMETHOD(type,methodname,arglist)  type (*methodname) arglist
+#define JMETHOD(type,methodname,arglist)  type (JCDECL *methodname) arglist
 #else
-#define JMETHOD(type,methodname,arglist)  type (*methodname) ()
+#define JMETHOD(type,methodname,arglist)  type (JCDECL *methodname) ()
 #endif
 
 
 /* Here is the pseudo-keyword for declaring pointers that must be "far"
  * on 80x86 machines.  Most of the specialized coding for 80x86 is handled
  * by just saying "FAR *" where such a pointer is needed.  In a few places
  * explicit coding is needed; see uses of the NEED_FAR_POINTERS symbol.
  */
@@ -344,16 +344,17 @@
 #undef  D_ARITH_CODING_SUPPORTED    /* Arithmetic coding back end? */
 #define D_MULTISCAN_FILES_SUPPORTED /* Multiple-scan JPEG files? */
 #define D_PROGRESSIVE_SUPPORTED	    /* Progressive JPEG? (Requires MULTISCAN)*/
 #define SAVE_MARKERS_SUPPORTED	    /* jpeg_save_markers() needed? */
 #define BLOCK_SMOOTHING_SUPPORTED   /* Block smoothing? (Progressive only) */
 #undef  IDCT_SCALING_SUPPORTED	    /* Output rescaling via IDCT? */
 #undef  UPSAMPLE_SCALING_SUPPORTED  /* Output rescaling at upsample stage? */
 #define UPSAMPLE_MERGING_SUPPORTED  /* Fast path for sloppy upsampling? */
+#define UPSAMPLE_H1V2_SUPPORTED	    /* Fast/fancy processing for 1h2v? */
 #undef  QUANT_1PASS_SUPPORTED	    /* 1-pass color quantization? */
 #undef  QUANT_2PASS_SUPPORTED	    /* 2-pass color quantization? */
 
 /* more capability options later, no doubt */
 
 
 /*
  * Ordering of RGB data in scanlines passed to or from the application.
@@ -370,30 +371,111 @@
  *    can't use color quantization if you change that value.
  */
 
 #define RGB_RED		0	/* Offset of Red in an RGB scanline element */
 #define RGB_GREEN	1	/* Offset of Green */
 #define RGB_BLUE	2	/* Offset of Blue */
 #define RGB_PIXELSIZE	3	/* JSAMPLEs per RGB scanline element */
 
+#undef RGBX_FILLER_0XFF 	/* fill dummy bytes with 0xFF in RGBX format */
+
+
+/* SIMD support options: */
+
+#ifndef JSIMD_MMX_NOT_SUPPORTED
+#define JSIMD_ENCODER_MMX_SUPPORTED	/* Use MMX    in encoding process */
+#define JSIMD_DECODER_MMX_SUPPORTED	/* Use MMX    in decoding process */
+#endif
+#ifndef JSIMD_3DNOW_NOT_SUPPORTED
+#define JSIMD_ENCODER_3DNOW_SUPPORTED	/* Use 3DNow! in encoding process */
+#define JSIMD_DECODER_3DNOW_SUPPORTED	/* Use 3DNow! in decoding process */
+#endif
+#ifndef JSIMD_SSE_NOT_SUPPORTED
+#define JSIMD_ENCODER_SSE_SUPPORTED	/* Use SSE    in encoding process */
+#define JSIMD_DECODER_SSE_SUPPORTED	/* Use SSE    in decoding process */
+#endif
+#ifndef JSIMD_SSE2_NOT_SUPPORTED
+#define JSIMD_ENCODER_SSE2_SUPPORTED	/* Use SSE2   in encoding process */
+#define JSIMD_DECODER_SSE2_SUPPORTED	/* Use SSE2   in decoding process */
+#endif
+
+/* (encoder part): */
+
+#undef JFDCT_INT_QUANTIZE_WITH_DIVISION /* Use general quantization method */
+
+#if defined(JSIMD_ENCODER_MMX_SUPPORTED)
+#define JCCOLOR_RGBYCC_MMX_SUPPORTED	/* RGB->YCC conversion with MMX */
+#define JCSAMPLE_MMX_SUPPORTED		/* downsampling with MMX */
+#define JFDCT_INT_MMX_SUPPORTED		/* forward DCT with MMX */
+#endif
+#if defined(JSIMD_ENCODER_SSE2_SUPPORTED)
+#define JCCOLOR_RGBYCC_SSE2_SUPPORTED	/* RGB->YCC conversion with SSE2 */
+#define JCSAMPLE_SSE2_SUPPORTED		/* downsampling with SSE2 */
+#define JFDCT_INT_SSE2_SUPPORTED	/* forward DCT with SSE2 */
+#endif
+#if defined(JSIMD_ENCODER_3DNOW_SUPPORTED) && \
+    defined(JSIMD_ENCODER_MMX_SUPPORTED)
+#define JFDCT_FLT_3DNOW_MMX_SUPPORTED	/* forward DCT with 3DNow!/MMX */
+#endif
+#if defined(JSIMD_ENCODER_SSE_SUPPORTED) && \
+    defined(JSIMD_ENCODER_MMX_SUPPORTED)
+#define JFDCT_FLT_SSE_MMX_SUPPORTED	/* forward DCT with SSE/MMX */
+#endif
+#if defined(JSIMD_ENCODER_SSE_SUPPORTED) && \
+    defined(JSIMD_ENCODER_SSE2_SUPPORTED)
+#define JFDCT_FLT_SSE_SSE2_SUPPORTED	/* forward DCT with SSE/SSE2 */
+#endif
+
+/* (decoder part): */
+
+#if defined(JSIMD_DECODER_MMX_SUPPORTED)
+#define JDCOLOR_YCCRGB_MMX_SUPPORTED	/* YCC->RGB conversion with MMX */
+#define JDMERGE_MMX_SUPPORTED		/* merged upsampling with MMX */
+#define JDSAMPLE_FANCY_MMX_SUPPORTED	/* fancy upsampling with MMX */
+#define JDSAMPLE_SIMPLE_MMX_SUPPORTED	/* sloppy upsampling with MMX */
+#define JIDCT_INT_MMX_SUPPORTED		/* inverse DCT with MMX */
+#endif
+#if defined(JSIMD_DECODER_SSE2_SUPPORTED)
+#define JDCOLOR_YCCRGB_SSE2_SUPPORTED	/* YCC->RGB conversion with SSE2 */
+#define JDMERGE_SSE2_SUPPORTED		/* merged upsampling with SSE2 */
+#define JDSAMPLE_FANCY_SSE2_SUPPORTED	/* fancy upsampling with SSE2 */
+#define JDSAMPLE_SIMPLE_SSE2_SUPPORTED	/* sloppy upsampling with SSE2 */
+#define JIDCT_INT_SSE2_SUPPORTED	/* inverse DCT with SSE2 */
+#endif
+#if defined(JSIMD_DECODER_3DNOW_SUPPORTED) && \
+    defined(JSIMD_DECODER_MMX_SUPPORTED)
+#define JIDCT_FLT_3DNOW_MMX_SUPPORTED	/* inverse DCT with 3DNow!/MMX */
+#endif
+#if defined(JSIMD_DECODER_SSE_SUPPORTED) && \
+    defined(JSIMD_DECODER_MMX_SUPPORTED)
+#define JIDCT_FLT_SSE_MMX_SUPPORTED	/* inverse DCT with SSE/MMX */
+#endif
+#if defined(JSIMD_DECODER_SSE_SUPPORTED) && \
+    defined(JSIMD_DECODER_SSE2_SUPPORTED)
+#define JIDCT_FLT_SSE_SSE2_SUPPORTED	/* inverse DCT with SSE/SSE2 */
+#endif
+
 
 /* Definitions for speed-related optimizations. */
 
 
 /* If your compiler supports inline functions, define INLINE
  * as the inline keyword; otherwise define it as empty.
  */
 
 /* Mozilla mods here: add more ways of defining INLINE */
 
 #ifndef INLINE
 #ifdef __GNUC__			/* for instance, GNU C knows about inline */
 #define INLINE __inline__
 #endif
+#ifdef _MSC_VER
+#define INLINE __inline
+#endif
 #if defined( __IBMC__ ) || defined (__IBMCPP__)
 #define INLINE _Inline
 #endif
 #ifndef INLINE
 #ifdef __cplusplus
 #define INLINE inline		/* a C++ compiler should have it too */
 #else
 #define INLINE			/* default is to define it as empty */
--- jpeg.orig/jpeglib.h	2009-08-14 09:31:20 +0900
+++ jpeg/jpeglib.h	2009-12-13 19:57:40 +0900
@@ -1,15 +1,22 @@
 /*
  * jpeglib.h
  *
  * Copyright (C) 1991-1998, Thomas G. Lane.
  * This file is part of the Independent JPEG Group's software.
  * For conditions of distribution and use, see the accompanying README file.
  *
+ * ---------------------------------------------------------------------
+ * x86 SIMD extension for IJG JPEG library
+ * Copyright (C) 1999-2006, MIYASAKA Masaru.
+ * This file has been modified for SIMD extension.
+ * Last Modified :
+ * ---------------------------------------------------------------------
+ *
  * This file defines the application interface for the JPEG library.
  * Most applications using the library need only include this file,
  * and perhaps jerror.h if they want to know the exact error codes.
  */
 
 #ifndef JPEGLIB_H
 #define JPEGLIB_H
 
@@ -38,28 +45,30 @@
  */
 
 #ifndef JCONFIG_INCLUDED	/* in case jinclude.h already did */
 #include "jconfig.h"		/* widely used configuration options */
 #endif
 #include "jmorecfg.h"		/* seldom changed options */
 
 
-#ifdef HAVE_MMX_INTEL_MNEMONICS
-	extern int MMXAvailable;
-#endif
-
-
 /* Version ID for the JPEG library.
  * Might be useful for tests like "#if JPEG_LIB_VERSION >= 60".
  */
 
 #define JPEG_LIB_VERSION  62	/* Version 6b */
 
 
+/* SIMD Ext: Version ID for the SIMD extension.
+ */
+
+#define JPEG_SIMDEXT_VERSION  102	/* version 1.02 */
+#define JPEG_SIMDEXT_VER_STR  "1.02"
+
+
 /* Various constants determining the sizes of things.
  * All of these are specified by the JPEG standard, so don't change them
  * if you want to be compatible.
  */
 
 #define DCTSIZE		    8	/* The basic DCT block is 8x8 samples */
 #define DCTSIZE2	    64	/* DCTSIZE squared; # of elements in a block */
 #define NUM_QUANT_TBLS      4	/* Quantization tables are numbered 0..3 */
@@ -252,16 +261,25 @@
 /* Dithering options for decompression. */
 
 typedef enum {
 	JDITHER_NONE,		/* no dithering */
 	JDITHER_ORDERED,	/* simple ordered dither */
 	JDITHER_FS		/* Floyd-Steinberg error diffusion dither */
 } J_DITHER_MODE;
 
+/* SIMD Ext: bitflags for jpeg_simd_support() and jpeg_simd_mask() */
+
+#define JSIMD_NONE    0x00
+#define JSIMD_MMX     0x01
+#define JSIMD_3DNOW   0x02
+#define JSIMD_SSE     0x04
+#define JSIMD_SSE2    0x08
+#define JSIMD_ALL     (JSIMD_MMX | JSIMD_3DNOW | JSIMD_SSE | JSIMD_SSE2)
+
 
 /* Common fields between JPEG compression and decompression master structs. */
 
 #define jpeg_common_fields \
   struct jpeg_error_mgr * err;	/* Error handler module */\
   struct jpeg_memory_mgr * mem;	/* Memory manager module */\
   struct jpeg_progress_mgr * progress; /* Progress monitor, or NULL if none */\
   void * client_data;		/* Available for use by application */\
@@ -894,16 +912,28 @@
 #define jpeg_read_coefficients	jReadCoefs
 #define jpeg_write_coefficients	jWrtCoefs
 #define jpeg_copy_critical_parameters	jCopyCrit
 #define jpeg_abort_compress	jAbrtCompress
 #define jpeg_abort_decompress	jAbrtDecompress
 #define jpeg_abort		jAbort
 #define jpeg_destroy		jDestroy
 #define jpeg_resync_to_restart	jResyncRestart
+#define jpeg_simd_support	jSiSupport
+#ifndef JSIMD_MASKFUNC_NOT_SUPPORTED
+#define jpeg_simd_mask		jSiMask
+#endif
+#ifndef JSIMD_MODEINFO_NOT_SUPPORTED
+#define jpeg_simd_color_converter	jSiCColor
+#define jpeg_simd_downsampler		jSiDownsampler
+#define jpeg_simd_forward_dct		jSiFDCT
+#define jpeg_simd_color_deconverter	jSiDColor
+#define jpeg_simd_upsampler		jSiUpsampler
+#define jpeg_simd_inverse_dct		jSiIDCT
+#endif /* !JSIMD_MODEINFO_NOT_SUPPORTED */
 #endif /* NEED_SHORT_EXTERNAL_NAMES */
 
 #ifdef __cplusplus
 extern "C" {
 #endif
 
 /* Default error-management setup */
 EXTERN(struct jpeg_error_mgr *) jpeg_std_error
@@ -1057,16 +1087,34 @@
  */
 EXTERN(void) jpeg_abort JPP((j_common_ptr cinfo));
 EXTERN(void) jpeg_destroy JPP((j_common_ptr cinfo));
 
 /* Default restart-marker-resync procedure for use by data source modules */
 EXTERN(boolean) jpeg_resync_to_restart JPP((j_decompress_ptr cinfo,
 					    int desired));
 
+/* SIMD Ext: retrieve SIMD/CPU information */
+EXTERN(unsigned int) jpeg_simd_support JPP((j_common_ptr cinfo));
+#ifndef JSIMD_MASKFUNC_NOT_SUPPORTED
+EXTERN(unsigned int) jpeg_simd_mask
+	JPP((j_common_ptr cinfo, unsigned int remove, unsigned int add));
+#endif
+#ifndef JSIMD_MODEINFO_NOT_SUPPORTED
+EXTERN(unsigned int) jpeg_simd_color_converter JPP((j_compress_ptr cinfo));
+EXTERN(unsigned int) jpeg_simd_downsampler JPP((j_compress_ptr cinfo));
+EXTERN(unsigned int) jpeg_simd_forward_dct JPP((j_compress_ptr cinfo,
+						int method));
+EXTERN(unsigned int) jpeg_simd_color_deconverter JPP((j_decompress_ptr cinfo));
+EXTERN(unsigned int) jpeg_simd_upsampler JPP((j_decompress_ptr cinfo,
+					      int do_fancy));
+EXTERN(unsigned int) jpeg_simd_inverse_dct JPP((j_decompress_ptr cinfo,
+						int method));
+#endif /* !JSIMD_MODEINFO_NOT_SUPPORTED */
+
 #ifdef __cplusplus
 } /* extern "C" */
 #endif /* __cplusplus */
 
 /* These marker codes are exported since applications and data source modules
  * are likely to want to use them.
  */
 
--- jpeg.orig/jwinfig.h	2009-08-14 09:31:20 +0900
+++ jpeg/jwinfig.h	2009-12-13 19:57:40 +0900
@@ -26,16 +26,25 @@
 #undef RIGHT_SHIFT_IS_UNSIGNED
 
 #define USE_MSDOS_MEMANSI
 
 #define MAX_ALLOC_CHUNK 65520L	/* Maximum request to malloc() */
 
 #endif /* JPEG_INTERNALS */
 
+#if defined(JPEG_INTERNALS) || defined(JPEG_INTERNAL_OPTIONS)
+#undef JSIMD_MMX_NOT_SUPPORTED
+#undef JSIMD_3DNOW_NOT_SUPPORTED
+#undef JSIMD_SSE_NOT_SUPPORTED
+#undef JSIMD_SSE2_NOT_SUPPORTED
+#endif
+#define JSIMD_MASKFUNC_NOT_SUPPORTED
+#define JSIMD_MODEINFO_NOT_SUPPORTED
+
 #ifdef JPEG_CJPEG_DJPEG
 
 #define BMP_SUPPORTED		/* BMP image file format */
 #define GIF_SUPPORTED		/* GIF image file format */
 #define PPM_SUPPORTED		/* PBMPLUS PPM/PGM image file format */
 #undef RLE_SUPPORTED		/* Utah RLE image file format */
 #define TARGA_SUPPORTED		/* Targa image file format */
 
--- jpeg.orig/Makefile.in	2009-08-14 09:31:19 +0900
+++ jpeg/Makefile.in	2009-12-13 20:11:02 +0900
@@ -15,16 +15,21 @@
 # The Original Code is mozilla.org code.
 #
 # The Initial Developer of the Original Code is
 # Netscape Communications Corporation.
 # Portions created by the Initial Developer are Copyright (C) 1998
 # the Initial Developer. All Rights Reserved.
 #
 # Contributor(s):
+# Modified for IJG's JPEG library with SIMD extension
+#  original library : MIYASAKA Masaru
+#  convert for Firefox : Takeshi Ichimaru
+#       modified by    : MIYASAKA Masaru (April 26, 2006)
+#       modified for namoroka by Takeshi Ichimaru
 #
 # Alternatively, the contents of this file may be used under the terms of
 # either the GNU General Public License Version 2 or later (the "GPL"), or
 # the GNU Lesser General Public License Version 2.1 or later (the "LGPL"),
 # in which case the provisions of the GPL or the LGPL are applicable instead
 # of those above. If you wish to allow use of your version of this file only
 # under the terms of either the GPL or the LGPL, and not to allow others to
 # use your version of this file under the terms of the MPL, indicate your
@@ -64,45 +69,62 @@
 		jdinput.c \
 		jdmarker.c \
 		jdhuff.c \
 		jdphuff.c \
 		jdmainct.c \
 		jdcoefct.c \
 		jdpostct.c \
 		jddctmgr.c \
-		jidctfst.c \
-		jidctflt.c \
-		jidctint.c \
 		jdsample.c \
 		jdcolor.c \
 		jquant1.c \
 		jquant2.c \
 		jdmerge.c \
 		jcomapi.c \
 		jutils.c \
 		jerror.c \
 		jmemmgr.c \
 		jmemnobs.c \
-		jfdctflt.c \
-		jfdctfst.c \
-		jfdctint.c \
 		$(NULL)
 
 EXPORTS		= \
 		jconfig.h \
 		jerror.h \
 		jinclude.h \
 		jmorecfg.h \
 		jpeglib.h \
 		jpegint.h \
 		jwinfig.h \
 		jos2fig.h \
 		$(NULL)
 
+ASFILES		= \
+		jdcolmmx.asm \
+		jdcolss2.asm \
+		jdmermmx.asm \
+		jdmerss2.asm \
+		jdsammmx.asm \
+		jdsamss2.asm \
+		ji3dnflt.asm \
+		jidctflt.asm \
+		jidctfst.asm \
+		jidctint.asm \
+		jidctred.asm \
+		jimmxfst.asm \
+		jimmxint.asm \
+		jimmxred.asm \
+		jiss2flt.asm \
+		jiss2fst.asm \
+		jiss2int.asm \
+		jiss2red.asm \
+		jisseflt.asm \
+		jsimdcpu.asm \
+		$(NULL)
+
 # These files enable support for writing JPEGs
 # (on certain platforms, or if JPEG image encoder support is required)
 ifneq (,$(filter os2 windows,$(MOZ_WIDGET_TOOLKIT))$(filter jpeg,$(MOZ_IMG_ENCODERS)))
 CSRCS		+= \
 		jcapimin.c \
 		jcparam.c \
 		jcapistd.c \
 		jcmarker.c \
@@ -113,14 +135,79 @@
 		jcmaster.c \
 		jccoefct.c \
 		jccolor.c \
 		jcphuff.c \
 		jcdctmgr.c \
 		jcprepct.c \
 		$(NULL)
 
+ASFILES		+= \
+		jccolmmx.asm \
+		jccolss2.asm \
+		jcqnt3dn.asm \
+		jcqntflt.asm \
+		jcqntint.asm \
+		jcqntmmx.asm \
+		jcqnts2f.asm \
+		jcqnts2i.asm \
+		jcqntsse.asm \
+		jcsammmx.asm \
+		jcsamss2.asm \
+		jf3dnflt.asm \
+		jfdctflt.asm \
+		jfdctfst.asm \
+		jfdctint.asm \
+		jfmmxfst.asm \
+		jfmmxint.asm \
+		jfss2fst.asm \
+		jfss2int.asm \
+		jfsseflt.asm \
+		$(NULL)
+endif
+
+# system-dependent SIMD instruction support checker
+#
+ifeq ($(OS_ARCH),WINNT)
+ASFILES		+= jsimdw32.asm $(NULL)
+else
+CSRCS		+= jsimdgcc.c   $(NULL)
+endif
+
+# object file format specifier for NASM. see jsimdext.inc for more details.
+#
+ifeq ($(OS_ARCH),WINNT)
+NASM_OBJFMT = -fwin32 -DWIN32
+endif
+ifeq ($(OS_ARCH),Darwin)
+NASM_OBJFMT = -fmacho -DMACHO
+endif
+ifndef NASM_OBJFMT
+NASM_OBJFMT = -felf -DELF
+endif
+
+# filename of NASM.
+#
+ifneq (,$(shell nasmw -v 2>/dev/null))
+NASM = nasmw
+else
+NASM = nasm
 endif
 
+AS         = $(CYGWIN_WRAPPER) $(NASM)
+ASFLAGS    = $(NASM_OBJFMT) -i./ -i$(srcdir)/
+ASM_SUFFIX = asm
+AS_DASH_C_FLAG =
+
 # need static lib for some of the libimg componentry to link properly
 FORCE_STATIC_LIB = 1
 
 include $(topsrcdir)/config/rules.mk
+
+# rules to generate a jsimdcfg.inc (generated into the object directory)
+#
+$(addprefix $(srcdir)/,$(ASFILES)): jsimdcfg.inc
+jsimdcfg.inc: makecfg.c jinclude.h jconfig.h jpeglib.h jmorecfg.h jpegint.h jerror.h Makefile Makefile.in
+	$(ELOG) $(CC) $(COMPILE_CFLAGS) $(OUTOPTION)makecfg $(_VPATH_SRCS)
+	./makecfg > jsimdcfg.inc
+	-$(RM) makecfg$(BIN_SUFFIX) makecfg.$(OBJ_SUFFIX)
+
+ALL_TRASH += jsimdcfg.inc
